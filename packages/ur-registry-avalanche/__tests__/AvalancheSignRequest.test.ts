// @ts-nocheck

import { StellarSignRequest, SignType, AvalancheSignRequest } from "../src";
import { CryptoKeypath, PathComponent } from "../src";
import * as uuid from "uuid";

describe("avalanche-sign-request", () => {
  it("test should generate avalanche-sign-reqeust", () => {
    const avalancheData = Buffer.from(
      "00000000000000000001ed5f38341e436e5d46e2bb00b45d62ae97d1b050c64bc634ae10626739e35c4b0000000121e67317cbc4be2aeb00677ad6462778a8f52274b9d605df2591b23027a87dff00000007000000000089544000000000000000000000000100000001512e7191685398f00663e12197a3d8f6012d9ea300000001db720ad6707915cc4751fb7e5491a3af74e127a1d81817abe9438590c0833fe10000000021e67317cbc4be2aeb00677ad6462778a8f52274b9d605df2591b23027a87dff000000050000000000989680000000010000000000000000",
      "hex"
    );
    const mfp = "1250B6Bc";
    const xpub =
      "xpub661MyMwAqRbcFFDMuFiGQmA1EqWxxgDLdtNvxxiucf9qkfoVrvwgnYyshxWoewWtkZ1aLhKoVDrpeDvn1YRqxX2szhGKi3UiSEv1hYRMF8q";
    const walletIndex = 0;

    const avalancheSignRequest = AvalancheSignRequest.constructAvalancheRequest(
      avalancheData,
      mfp,
      xpub,
      walletIndex
    );

    expect(avalancheSignRequest.toUR().cbor.toString("hex")).toBe(
      "a501d82550c2a99c730e3c4edc910df4e8c9ea27ea0258de00000000000000000001ed5f38341e436e5d46e2bb00b45d62ae97d1b050c64bc634ae10626739e35c4b0000000121e67317cbc4be2aeb00677ad6462778a8f52274b9d605df2591b23027a87dff00000007000000000089544000000000000000000000000100000001512e7191685398f00663e12197a3d8f6012d9ea300000001db720ad6707915cc4751fb7e5491a3af74e127a1d81817abe9438590c0833fe10000000021e67317cbc4be2aeb00677ad6462778a8f52274b9d605df2591b23027a87dff0000000500000000009896800000000100000000000000000348313235304236426306786f787075623636314d794d77417152626347536d4657565a6b32683737337a4d7263504671445557693763465270675068666e3779394845507a5073424445585978415766416f476f374537696a6a5966423378415938364d597a6676474c44486d63793265705a4b4e6544643475510700"
    );
  });
});
